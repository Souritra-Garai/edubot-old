// Generated by gencpp from file differential_drive/WheelAngularVelocityPair.msg
// DO NOT EDIT!


#ifndef DIFFERENTIAL_DRIVE_MESSAGE_WHEELANGULARVELOCITYPAIR_H
#define DIFFERENTIAL_DRIVE_MESSAGE_WHEELANGULARVELOCITYPAIR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace differential_drive
{
template <class ContainerAllocator>
struct WheelAngularVelocityPair_
{
  typedef WheelAngularVelocityPair_<ContainerAllocator> Type;

  WheelAngularVelocityPair_()
    : wheel_angular_velocity_left(0.0)
    , wheel_angular_velocity_right(0.0)  {
    }
  WheelAngularVelocityPair_(const ContainerAllocator& _alloc)
    : wheel_angular_velocity_left(0.0)
    , wheel_angular_velocity_right(0.0)  {
  (void)_alloc;
    }



   typedef float _wheel_angular_velocity_left_type;
  _wheel_angular_velocity_left_type wheel_angular_velocity_left;

   typedef float _wheel_angular_velocity_right_type;
  _wheel_angular_velocity_right_type wheel_angular_velocity_right;





  typedef boost::shared_ptr< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> const> ConstPtr;

}; // struct WheelAngularVelocityPair_

typedef ::differential_drive::WheelAngularVelocityPair_<std::allocator<void> > WheelAngularVelocityPair;

typedef boost::shared_ptr< ::differential_drive::WheelAngularVelocityPair > WheelAngularVelocityPairPtr;
typedef boost::shared_ptr< ::differential_drive::WheelAngularVelocityPair const> WheelAngularVelocityPairConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator1> & lhs, const ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator2> & rhs)
{
  return lhs.wheel_angular_velocity_left == rhs.wheel_angular_velocity_left &&
    lhs.wheel_angular_velocity_right == rhs.wheel_angular_velocity_right;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator1> & lhs, const ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace differential_drive

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "adff221a07855e72470c2f5460fcf2d6";
  }

  static const char* value(const ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xadff221a07855e72ULL;
  static const uint64_t static_value2 = 0x470c2f5460fcf2d6ULL;
};

template<class ContainerAllocator>
struct DataType< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "differential_drive/WheelAngularVelocityPair";
  }

  static const char* value(const ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 wheel_angular_velocity_left\n"
"float32 wheel_angular_velocity_right\n"
;
  }

  static const char* value(const ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.wheel_angular_velocity_left);
      stream.next(m.wheel_angular_velocity_right);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WheelAngularVelocityPair_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::differential_drive::WheelAngularVelocityPair_<ContainerAllocator>& v)
  {
    s << indent << "wheel_angular_velocity_left: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_angular_velocity_left);
    s << indent << "wheel_angular_velocity_right: ";
    Printer<float>::stream(s, indent + "  ", v.wheel_angular_velocity_right);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DIFFERENTIAL_DRIVE_MESSAGE_WHEELANGULARVELOCITYPAIR_H
